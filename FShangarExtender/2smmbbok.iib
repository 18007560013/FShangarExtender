using System;
using System.Collections.Generic;
using System.Text;
using UnityEngine;
using System.IO;

[KSPAddon(KSPAddon.Startup.EditorAny, false)]
class FSeditorExtender : MonoBehaviour
{
    private VABCamera cameraVAB;
    private float cameraVABHeightMin, cameraVABHeightMax = 300f;
    private float cameraVABDistanceMin, cameraVABDistanceMax = 1000f;

    private SPHCamera cameraSPH;
    private float cameraSPHHeightMin, cameraSPHHeightMax = 300f;
    private float cameraSPHDistanceMin, cameraSPHDistanceMax = 1000f;
    private float cameraSPHDisplaceXMin, cameraSPHDisplaceXMax = 1000f;
    private float cameraSPHDisplaceZMin, cameraSPHDisplaceZMax = 1000f;

    private SpaceNavigatorLocalCamera editorSpaceNavigator;
    private Vector3 editorSpaceNavigatorBoundsMin, editorSpaceNavigatorBoundsMax = new Vector3 (1000f, 200f, 1000f);

    private EditorLogic[] editorLogic;
    private Vector3 editorLogicBoundsMin, editorLogicBoundsMax = new Vector3 (1000f, 300f, 1000f);

    private GameObject sceneGeometryVAB;
    private GameObject sceneGeometrySPH;

    private string sceneGeometryNameVAB = "model_vab_parent_prefab";
    private string sceneGeometryNameSPH = "model_sph_parent_prefab";

    private string[] sceneGeometryNameVABStatics = new string[4];
    private string sceneGeometryNameSPHStatic = "model_sph_interior_main_v16";

    private string sceneCrewNameVAB = "VABCrew";
    private string sceneCrewNameSPH = "SPHCrew";

    private float sceneScaleMinVAB = 0.9f;
    private float sceneScaleMinSPH = 0.8f;

    private float sceneScaleMaxVAB = 4f;
    private float sceneScaleMaxSPH = 4f;

    private Light[] sceneLights;

    private string hotKey = "[*]";

    public static string appPath = KSPUtil.ApplicationRootPath.Replace("\\", "/");
    public static string pluginDataPath = appPath + "GameData/FShangarExtender/";
    public string settingsFile = pluginDataPath + "settings.txt";

    public void Awake ()
    {

    }

    public void Start ()
    {
        sceneGeometryNameVABStatics[0] = "model_vab_interior_occluder_v16";
        sceneGeometryNameVABStatics[1] = "model_vab_interior_props_v16";
        sceneGeometryNameVABStatics[2] = "model_vab_walls";
        sceneGeometryNameVABStatics[3] = "model_vab_windows";

        // Camera fetch

        cameraVAB = Camera.main.GetComponent<VABCamera> ();
        if (cameraVAB != null)
        {
            Debug.Log ("FSeditorExtender: Found the SPH camera.");
            cameraVABHeightMin = cameraVAB.maxHeight;
            cameraVABDistanceMin = cameraVAB.maxDistance;
        }
        
        cameraSPH = Camera.main.GetComponent<SPHCamera>();
        if (cameraSPH != null)
        {
            Debug.Log ("FSeditorExtender: Found the SPH camera.");
            cameraSPHHeightMin = cameraSPH.maxHeight;
            cameraSPHDistanceMin = cameraSPH.maxDistance;
            cameraSPHDisplaceXMin = cameraSPH.maxDisplaceX;
            cameraSPHDisplaceZMin = cameraSPH.maxDisplaceZ;
        }

        // Editor logic fetch

        editorSpaceNavigator = Camera.main.GetComponent<SpaceNavigatorLocalCamera>();
        if (editorSpaceNavigator != null)
        {
            Debug.Log ("FSeditorExtender: Found SpaceNavigator.");
            editorSpaceNavigatorBoundsMin = editorSpaceNavigator.bounds.extents;
        }

        editorLogic = (EditorLogic[])FindObjectsOfType(typeof(EditorLogic));
        if (editorLogic.Length > 0)
        {
            Debug.Log ("FSeditorExtender: Found EditorLogic: " + editorLogic.Length);
            for (int i = 0; i < editorLogic.Length; i++)
            {
                editorLogicBoundsMin = editorLogic[i].editorBounds.extents;
            }
        }

        // Scene fetch

        sceneGeometryVAB = GameObject.Find (sceneGeometryNameVAB);
        if (sceneGeometryVAB != null)
        {
            Debug.Log ("FSeditorExtender: VAB geometry found.");
            sceneGeometryVAB.isStatic = false;
            for (int i = 0; i < sceneGeometryNameVABStatics.Length; ++i)
            {
                GameObject sceneGeometryVABBody = GameObject.Find (sceneGeometryNameVABStatics[i]);
                if (sceneGeometryVABBody != null)
                {
                    Debug.Log ("FSeditorExtender: VAB geometry body found: " + sceneGeometryVABBody.name + " / " + sceneGeometryVABBody);
                    sceneGeometryVABBody.isStatic = false;

                    sceneGeometryVABBody.transform.parent = sceneGeometryVAB.transform;
                    sceneGeometryVABBody.transform.localScale = Vector3.one;
                }
            }
        }

        sceneGeometrySPH = GameObject.Find (sceneGeometryNameSPH);
        if (sceneGeometrySPH != null)
        {
            Debug.Log ("FSeditorExtender: SPH geometry found.");
            sceneGeometrySPH.isStatic = false;
            GameObject sceneGeometrySPHBody = GameObject.Find (sceneGeometryNameSPHStatic);
            if (sceneGeometrySPHBody != null)
            {
                Debug.Log ("FSeditorExtender: SPH geometry body found.");
                sceneGeometrySPHBody.isStatic = false;
                sceneGeometrySPHBody.transform.parent = sceneGeometrySPH.transform;
                sceneGeometrySPHBody.transform.localScale = Vector3.one;
            }
        }

        GameObject sceneCrewHolder = new GameObject ();
        sceneCrewHolder.transform.localScale = Vector3.one;
        sceneCrewHolder.transform.localPosition = Vector3.zero;

        // Crew fetch

        GameObject sceneCrewVAB = GameObject.Find (sceneCrewNameVAB);
        if (sceneCrewVAB != null)
        {
            Debug.Log ("FSeditorExtender: VAB crew found.");
            sceneCrewVAB.transform.parent = sceneCrewHolder.transform;
        }

        GameObject sceneCrewSPH = GameObject.Find (sceneCrewNameSPH);
        if (sceneCrewSPH != null)
        {
            Debug.Log ("FSeditorExtender: SPH crew found.");
            sceneCrewSPH.transform.parent = sceneCrewHolder.transform;
        }

        // Light fetch

        sceneLights = (Light[]) FindObjectsOfType (typeof (Light));

        getHotKey();
    }

    private void getHotKey()
    {
        StreamReader stream;
        try
        {
            stream = new StreamReader(settingsFile);
        }
        catch
        {
            Debug.Log("FSeditorExtender: settings.txt not found in GameData\\FShangarExtender\\, using default hotkey numpad *");
            return;
        }
        string newLine = string.Empty;
        int craftFileFormat = 0;

        newLine = readSetting(stream);
        int.TryParse(newLine, out craftFileFormat);

        newLine = readSetting(stream);

        hotKey = newLine;
        Debug.Log("FSeditorExtender: Assigned hangar scale hotkey: " + newLine);
    }

    private string readSetting (StreamReader stream)
    {
        string newLine = string.Empty;
        try
        {
            while (newLine == string.Empty && !stream.EndOfStream)
            {
                newLine = stream.ReadLine();
                newLine = newLine.TrimStart(' ');
                if (newLine.Length > 1)
                {
                    if (newLine.Substring(0, 2) == "//")
                    {
                        //Debug.Log("FSeditorExtender settings comment Line: " + newLine);
                        newLine = string.Empty;
                    }
                }
            }
        }
        catch (Exception e)
        {
            Debug.Log("FSeditorExtender: stream reader error: " + e.ToString());
        }
        return newLine;
    }

    public void Update ()
    {
        bool gotKeyPress = false;
        try
        {
            gotKeyPress = Input.GetKeyDown(hotKey);
        }
        catch
        {
            Debug.Log("FShangarExtender: Invalid keycode. Resetting to numpad *");
            hotKey = "[*]";
            gotKeyPress = false;
        }
        if (gotKeyPress)
        {
            Debug.Log("FSeditorExtender: Scaling Hangar Geometry");
            if (sceneGeometryVAB != null)
            {
                if (sceneGeometryVAB.transform.localScale.x == sceneScaleMinVAB)
                {
                    sceneGeometryVAB.transform.localScale = Vector3.one * sceneScaleMaxVAB;
                    cameraVAB.maxHeight = cameraVABHeightMax;
                    cameraVAB.maxDistance = cameraVABDistanceMax;
                    if (sceneLights.Length > 0)
                    {
                        for (int i = 0; i < sceneLights.Length; ++i)
                        {
                            if (sceneLights[i].type == LightType.Spot) sceneLights[i].range *= sceneScaleMaxVAB / sceneScaleMinVAB;
                        }
                    }
                }
                else
                {
                    sceneGeometryVAB.transform.localScale = Vector3.one * sceneScaleMinVAB;
                    cameraVAB.maxHeight = cameraVABHeightMin;
                    cameraVAB.maxDistance = cameraVABDistanceMin;
                    if (sceneLights.Length > 0)
                    {
                        for (int i = 0; i < sceneLights.Length; ++i)
                        {
                            if (sceneLights[i].type == LightType.Spot) sceneLights[i].range /= sceneScaleMaxVAB / sceneScaleMinVAB;
                        }
                    }
                }
            }
            else if (sceneGeometrySPH != null)
            {
                if (sceneGeometrySPH.transform.localScale.x == sceneScaleMinSPH)
                {
                    RenderSettings.fogStartDistance *= sceneScaleMaxSPH / sceneScaleMinSPH;
                    RenderSettings.fogEndDistance *= sceneScaleMaxSPH / sceneScaleMinSPH;

                    sceneGeometrySPH.transform.localScale = Vector3.one * sceneScaleMaxSPH;
                    cameraSPH.maxHeight = cameraSPHHeightMax;
                    cameraSPH.maxDistance = cameraSPHDistanceMax;
                    cameraSPH.maxDisplaceX = cameraSPHDisplaceXMax;
                    cameraSPH.maxDisplaceZ = cameraSPHDisplaceZMax;
                    if (sceneLights.Length > 0)
                    {
                        for (int i = 0; i < sceneLights.Length; ++i)
                        {
                            if (sceneLights[i].type == LightType.Spot) sceneLights[i].range *= sceneScaleMaxSPH / sceneScaleMinSPH;
                        }
                    }
                }
                else
                {
                    RenderSettings.fogStartDistance /= sceneScaleMaxSPH / sceneScaleMinSPH;
                    RenderSettings.fogEndDistance /= sceneScaleMaxSPH / sceneScaleMinSPH;

                    sceneGeometrySPH.transform.localScale = Vector3.one * sceneScaleMinSPH;
                    cameraSPH.maxHeight = cameraSPHHeightMin;
                    cameraSPH.maxDistance = cameraSPHDistanceMin;
                    cameraSPH.maxDisplaceX = cameraSPHDisplaceXMin;
                    cameraSPH.maxDisplaceZ = cameraSPHDisplaceZMin;
                    if (sceneLights.Length > 0)
                    {
                        for (int i = 0; i < sceneLights.Length; ++i)
                        {
                            if (sceneLights[i].type == LightType.Spot) sceneLights[i].range /= sceneScaleMaxSPH / sceneScaleMinSPH;
                        }
                    }
                }
                sceneGeometrySPH.transform.localPosition = new Vector3 (0f, -0.2f * (sceneGeometrySPH.transform.localScale.x - sceneScaleMinSPH), 0f);
            }

            if (editorSpaceNavigator != null)
            {
                if (editorSpaceNavigator.bounds.extents == editorSpaceNavigatorBoundsMin) editorSpaceNavigator.bounds.extents = editorSpaceNavigatorBoundsMax;
                else editorSpaceNavigator.bounds.extents = editorSpaceNavigatorBoundsMin;
            }

            if (editorLogic.Length > 0)
            {
                Debug.Log ("FSeditorExtender: Found EditorLogic: " + editorLogic.Length);
                for (int i = 0; i < editorLogic.Length; i++)
                {
                    if (editorLogic[i].editorBounds.extents == editorLogicBoundsMin) editorLogic[i].editorBounds.extents = editorLogicBoundsMax;
                    else editorLogic[i].editorBounds.extents = editorLogicBoundsMin;
                }
            }
        }
    }
}